import { Prisma, {{ model }} } from '@prisma/client';
import prisma from '@database';

class {{ properCase model }}Repository {
  async create(data: Prisma.{{ properCase model }}CreateInput): Promise<{{ properCase model }}> {
    const {{ camelCase model }} = await prisma.{{ camelCase model }}.create({ data });
    return {{ camelCase model }};
  }

  async findById(id: string): Promise<{{ properCase model }} | null> {
    const {{ camelCase model }} = await prisma.{{ camelCase model }}.findUnique({ where: { id } });
    return {{ camelCase model }};
  }

  async findAll(): Promise<{{ properCase model }}[] | null> {
    const {{ camelCase model }}s = await prisma.{{ camelCase model }}.findMany();
    return {{ camelCase model }}s as {{ properCase model }}[];
  }

  async update(id: string, data: Prisma.{{ properCase model }}UpdateInput): Promise<{{ properCase model }}> {
    const {{ camelCase model }} = await prisma.{{ camelCase model }}.update({ where: { id }, data });
    return {{ camelCase model }};
  }

  async delete(id: string): Promise<{{ properCase model }}> {
    const {{ camelCase model }} = await prisma.{{ camelCase model }}.delete({ where: { id } });
    return {{ camelCase model }};
  }
}

export default new {{ properCase model }}Repository();
